/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Policy2Response } from '../model';
// @ts-ignore
import { PolicyInvoice2Response } from '../model';
// @ts-ignore
import { PolicyholderCreateRequest2 } from '../model';
// @ts-ignore
import { PolicyholderResponse3 } from '../model';
// @ts-ignore
import { PolicyholderUpdateRequest2 } from '../model';
/**
 * PolicyholderApi - axios parameter creator
 * @export
 */
export const PolicyholderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createPolicyholder4UsingPOST
         * @param {PolicyholderCreateRequest2} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicyholder4UsingPOST: async (request: PolicyholderCreateRequest2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('createPolicyholder4UsingPOST', 'request', request)
            const localVarPath = `/policyholder/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getInvoicesForPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesForPolicyholder4UsingGET: async (policyholderLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyholderLocator' is not null or undefined
            assertParamExists('getInvoicesForPolicyholder4UsingGET', 'policyholderLocator', policyholderLocator)
            const localVarPath = `/policyholder/{policyholderLocator}/invoices`
                .replace(`{${"policyholderLocator"}}`, encodeURIComponent(String(policyholderLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getInvoicesForPolicyholderUsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesForPolicyholderUsingGET: async (policyholderLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyholderLocator' is not null or undefined
            assertParamExists('getInvoicesForPolicyholderUsingGET', 'policyholderLocator', policyholderLocator)
            const localVarPath = `/policyholder/v2/{policyholderLocator}/invoices`
                .replace(`{${"policyholderLocator"}}`, encodeURIComponent(String(policyholderLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPoliciesForPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoliciesForPolicyholder4UsingGET: async (policyholderLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyholderLocator' is not null or undefined
            assertParamExists('getPoliciesForPolicyholder4UsingGET', 'policyholderLocator', policyholderLocator)
            const localVarPath = `/policyholder/{policyholderLocator}/policies`
                .replace(`{${"policyholderLocator"}}`, encodeURIComponent(String(policyholderLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * These are some notes to test the note function
         * @summary getPoliciesForPolicyholderUsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoliciesForPolicyholderUsingGET: async (policyholderLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyholderLocator' is not null or undefined
            assertParamExists('getPoliciesForPolicyholderUsingGET', 'policyholderLocator', policyholderLocator)
            const localVarPath = `/policyholder/v2/{policyholderLocator}/policies`
                .replace(`{${"policyholderLocator"}}`, encodeURIComponent(String(policyholderLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyholder4UsingGET: async (policyholderLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyholderLocator' is not null or undefined
            assertParamExists('getPolicyholder4UsingGET', 'policyholderLocator', policyholderLocator)
            const localVarPath = `/policyholder/{policyholderLocator}`
                .replace(`{${"policyholderLocator"}}`, encodeURIComponent(String(policyholderLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatePolicyholder4UsingPOST
         * @param {PolicyholderUpdateRequest2} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicyholder4UsingPOST: async (updateRequest: PolicyholderUpdateRequest2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updatePolicyholder4UsingPOST', 'updateRequest', updateRequest)
            const localVarPath = `/policyholder/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyholderApi - functional programming interface
 * @export
 */
export const PolicyholderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicyholderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createPolicyholder4UsingPOST
         * @param {PolicyholderCreateRequest2} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicyholder4UsingPOST(request: PolicyholderCreateRequest2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyholderResponse3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicyholder4UsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getInvoicesForPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoicesForPolicyholder4UsingGET(policyholderLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PolicyInvoice2Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoicesForPolicyholder4UsingGET(policyholderLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getInvoicesForPolicyholderUsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoicesForPolicyholderUsingGET(policyholderLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PolicyInvoice2Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoicesForPolicyholderUsingGET(policyholderLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getPoliciesForPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPoliciesForPolicyholder4UsingGET(policyholderLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Policy2Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPoliciesForPolicyholder4UsingGET(policyholderLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * These are some notes to test the note function
         * @summary getPoliciesForPolicyholderUsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPoliciesForPolicyholderUsingGET(policyholderLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Policy2Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPoliciesForPolicyholderUsingGET(policyholderLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyholder4UsingGET(policyholderLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyholderResponse3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyholder4UsingGET(policyholderLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updatePolicyholder4UsingPOST
         * @param {PolicyholderUpdateRequest2} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePolicyholder4UsingPOST(updateRequest: PolicyholderUpdateRequest2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyholderResponse3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePolicyholder4UsingPOST(updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PolicyholderApi - factory interface
 * @export
 */
export const PolicyholderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicyholderApiFp(configuration)
    return {
        /**
         * 
         * @summary createPolicyholder4UsingPOST
         * @param {PolicyholderCreateRequest2} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicyholder4UsingPOST(request: PolicyholderCreateRequest2, options?: any): AxiosPromise<PolicyholderResponse3> {
            return localVarFp.createPolicyholder4UsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getInvoicesForPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesForPolicyholder4UsingGET(policyholderLocator: string, options?: any): AxiosPromise<Array<PolicyInvoice2Response>> {
            return localVarFp.getInvoicesForPolicyholder4UsingGET(policyholderLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getInvoicesForPolicyholderUsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesForPolicyholderUsingGET(policyholderLocator: string, options?: any): AxiosPromise<Array<PolicyInvoice2Response>> {
            return localVarFp.getInvoicesForPolicyholderUsingGET(policyholderLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPoliciesForPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoliciesForPolicyholder4UsingGET(policyholderLocator: string, options?: any): AxiosPromise<Array<Policy2Response>> {
            return localVarFp.getPoliciesForPolicyholder4UsingGET(policyholderLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * These are some notes to test the note function
         * @summary getPoliciesForPolicyholderUsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoliciesForPolicyholderUsingGET(policyholderLocator: string, options?: any): AxiosPromise<Array<Policy2Response>> {
            return localVarFp.getPoliciesForPolicyholderUsingGET(policyholderLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPolicyholder4UsingGET
         * @param {string} policyholderLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyholder4UsingGET(policyholderLocator: string, options?: any): AxiosPromise<PolicyholderResponse3> {
            return localVarFp.getPolicyholder4UsingGET(policyholderLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updatePolicyholder4UsingPOST
         * @param {PolicyholderUpdateRequest2} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicyholder4UsingPOST(updateRequest: PolicyholderUpdateRequest2, options?: any): AxiosPromise<PolicyholderResponse3> {
            return localVarFp.updatePolicyholder4UsingPOST(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PolicyholderApi - object-oriented interface
 * @export
 * @class PolicyholderApi
 * @extends {BaseAPI}
 */
export class PolicyholderApi extends BaseAPI {
    /**
     * 
     * @summary createPolicyholder4UsingPOST
     * @param {PolicyholderCreateRequest2} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyholderApi
     */
    public createPolicyholder4UsingPOST(request: PolicyholderCreateRequest2, options?: any) {
        return PolicyholderApiFp(this.configuration).createPolicyholder4UsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getInvoicesForPolicyholder4UsingGET
     * @param {string} policyholderLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyholderApi
     */
    public getInvoicesForPolicyholder4UsingGET(policyholderLocator: string, options?: any) {
        return PolicyholderApiFp(this.configuration).getInvoicesForPolicyholder4UsingGET(policyholderLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getInvoicesForPolicyholderUsingGET
     * @param {string} policyholderLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyholderApi
     */
    public getInvoicesForPolicyholderUsingGET(policyholderLocator: string, options?: any) {
        return PolicyholderApiFp(this.configuration).getInvoicesForPolicyholderUsingGET(policyholderLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPoliciesForPolicyholder4UsingGET
     * @param {string} policyholderLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyholderApi
     */
    public getPoliciesForPolicyholder4UsingGET(policyholderLocator: string, options?: any) {
        return PolicyholderApiFp(this.configuration).getPoliciesForPolicyholder4UsingGET(policyholderLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * These are some notes to test the note function
     * @summary getPoliciesForPolicyholderUsingGET
     * @param {string} policyholderLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyholderApi
     */
    public getPoliciesForPolicyholderUsingGET(policyholderLocator: string, options?: any) {
        return PolicyholderApiFp(this.configuration).getPoliciesForPolicyholderUsingGET(policyholderLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPolicyholder4UsingGET
     * @param {string} policyholderLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyholderApi
     */
    public getPolicyholder4UsingGET(policyholderLocator: string, options?: any) {
        return PolicyholderApiFp(this.configuration).getPolicyholder4UsingGET(policyholderLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updatePolicyholder4UsingPOST
     * @param {PolicyholderUpdateRequest2} updateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyholderApi
     */
    public updatePolicyholder4UsingPOST(updateRequest: PolicyholderUpdateRequest2, options?: any) {
        return PolicyholderApiFp(this.configuration).updatePolicyholder4UsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
