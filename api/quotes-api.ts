/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PolicyPriceResponse } from '../model';
// @ts-ignore
import { PolicyQuoteResponse } from '../model';
// @ts-ignore
import { PolicyQuoteUpdateRequest } from '../model';
/**
 * QuotesApi - axios parameter creator
 * @export
 */
export const QuotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary acceptPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptPolicyQuoteUsingPATCH: async (quoteLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteLocator' is not null or undefined
            assertParamExists('acceptPolicyQuoteUsingPATCH', 'quoteLocator', quoteLocator)
            const localVarPath = `/quotes/{quoteLocator}/accept`
                .replace(`{${"quoteLocator"}}`, encodeURIComponent(String(quoteLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQuoteFromExistingUsingPOST
         * @param {string} quoteLocator 
         * @param {PolicyQuoteUpdateRequest} [addedChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuoteFromExistingUsingPOST: async (quoteLocator: string, addedChanges?: PolicyQuoteUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteLocator' is not null or undefined
            assertParamExists('createQuoteFromExistingUsingPOST', 'quoteLocator', quoteLocator)
            const localVarPath = `/quotes/{quoteLocator}/createNew`
                .replace(`{${"quoteLocator"}}`, encodeURIComponent(String(quoteLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addedChanges, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary discardPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discardPolicyQuoteUsingPATCH: async (quoteLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteLocator' is not null or undefined
            assertParamExists('discardPolicyQuoteUsingPATCH', 'quoteLocator', quoteLocator)
            const localVarPath = `/quotes/{quoteLocator}/discard`
                .replace(`{${"quoteLocator"}}`, encodeURIComponent(String(quoteLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary fetchPolicyQuotePriceUsingGET
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPolicyQuotePriceUsingGET: async (quoteLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteLocator' is not null or undefined
            assertParamExists('fetchPolicyQuotePriceUsingGET', 'quoteLocator', quoteLocator)
            const localVarPath = `/quotes/{quoteLocator}/price`
                .replace(`{${"quoteLocator"}}`, encodeURIComponent(String(quoteLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPolicyQuoteByLocatorUsingGET
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyQuoteByLocatorUsingGET: async (quoteLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteLocator' is not null or undefined
            assertParamExists('getPolicyQuoteByLocatorUsingGET', 'quoteLocator', quoteLocator)
            const localVarPath = `/quotes/{quoteLocator}`
                .replace(`{${"quoteLocator"}}`, encodeURIComponent(String(quoteLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary invalidatePolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidatePolicyQuoteUsingPATCH: async (quoteLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteLocator' is not null or undefined
            assertParamExists('invalidatePolicyQuoteUsingPATCH', 'quoteLocator', quoteLocator)
            const localVarPath = `/quotes/{quoteLocator}/invalidate`
                .replace(`{${"quoteLocator"}}`, encodeURIComponent(String(quoteLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary selectPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPolicyQuoteUsingPATCH: async (quoteLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteLocator' is not null or undefined
            assertParamExists('selectPolicyQuoteUsingPATCH', 'quoteLocator', quoteLocator)
            const localVarPath = `/quotes/{quoteLocator}/select`
                .replace(`{${"quoteLocator"}}`, encodeURIComponent(String(quoteLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {PolicyQuoteUpdateRequest} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuoteUsingPATCH: async (quoteLocator: string, updateRequest: PolicyQuoteUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteLocator' is not null or undefined
            assertParamExists('updateQuoteUsingPATCH', 'quoteLocator', quoteLocator)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateQuoteUsingPATCH', 'updateRequest', updateRequest)
            const localVarPath = `/quotes/{quoteLocator}`
                .replace(`{${"quoteLocator"}}`, encodeURIComponent(String(quoteLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuotesApi - functional programming interface
 * @export
 */
export const QuotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuotesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary acceptPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptPolicyQuoteUsingPATCH(quoteLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptPolicyQuoteUsingPATCH(quoteLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQuoteFromExistingUsingPOST
         * @param {string} quoteLocator 
         * @param {PolicyQuoteUpdateRequest} [addedChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuoteFromExistingUsingPOST(quoteLocator: string, addedChanges?: PolicyQuoteUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuoteFromExistingUsingPOST(quoteLocator, addedChanges, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary discardPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discardPolicyQuoteUsingPATCH(quoteLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discardPolicyQuoteUsingPATCH(quoteLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary fetchPolicyQuotePriceUsingGET
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPolicyQuotePriceUsingGET(quoteLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPriceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPolicyQuotePriceUsingGET(quoteLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getPolicyQuoteByLocatorUsingGET
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyQuoteByLocatorUsingGET(quoteLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyQuoteByLocatorUsingGET(quoteLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary invalidatePolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invalidatePolicyQuoteUsingPATCH(quoteLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invalidatePolicyQuoteUsingPATCH(quoteLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary selectPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectPolicyQuoteUsingPATCH(quoteLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPolicyQuoteUsingPATCH(quoteLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {PolicyQuoteUpdateRequest} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuoteUsingPATCH(quoteLocator: string, updateRequest: PolicyQuoteUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuoteUsingPATCH(quoteLocator, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuotesApi - factory interface
 * @export
 */
export const QuotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuotesApiFp(configuration)
    return {
        /**
         * 
         * @summary acceptPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptPolicyQuoteUsingPATCH(quoteLocator: string, options?: any): AxiosPromise<PolicyQuoteResponse> {
            return localVarFp.acceptPolicyQuoteUsingPATCH(quoteLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQuoteFromExistingUsingPOST
         * @param {string} quoteLocator 
         * @param {PolicyQuoteUpdateRequest} [addedChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuoteFromExistingUsingPOST(quoteLocator: string, addedChanges?: PolicyQuoteUpdateRequest, options?: any): AxiosPromise<PolicyQuoteResponse> {
            return localVarFp.createQuoteFromExistingUsingPOST(quoteLocator, addedChanges, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary discardPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discardPolicyQuoteUsingPATCH(quoteLocator: string, options?: any): AxiosPromise<PolicyQuoteResponse> {
            return localVarFp.discardPolicyQuoteUsingPATCH(quoteLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary fetchPolicyQuotePriceUsingGET
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPolicyQuotePriceUsingGET(quoteLocator: string, options?: any): AxiosPromise<PolicyPriceResponse> {
            return localVarFp.fetchPolicyQuotePriceUsingGET(quoteLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPolicyQuoteByLocatorUsingGET
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyQuoteByLocatorUsingGET(quoteLocator: string, options?: any): AxiosPromise<PolicyQuoteResponse> {
            return localVarFp.getPolicyQuoteByLocatorUsingGET(quoteLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary invalidatePolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidatePolicyQuoteUsingPATCH(quoteLocator: string, options?: any): AxiosPromise<PolicyQuoteResponse> {
            return localVarFp.invalidatePolicyQuoteUsingPATCH(quoteLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary selectPolicyQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPolicyQuoteUsingPATCH(quoteLocator: string, options?: any): AxiosPromise<void> {
            return localVarFp.selectPolicyQuoteUsingPATCH(quoteLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQuoteUsingPATCH
         * @param {string} quoteLocator 
         * @param {PolicyQuoteUpdateRequest} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuoteUsingPATCH(quoteLocator: string, updateRequest: PolicyQuoteUpdateRequest, options?: any): AxiosPromise<PolicyQuoteResponse> {
            return localVarFp.updateQuoteUsingPATCH(quoteLocator, updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuotesApi - object-oriented interface
 * @export
 * @class QuotesApi
 * @extends {BaseAPI}
 */
export class QuotesApi extends BaseAPI {
    /**
     * 
     * @summary acceptPolicyQuoteUsingPATCH
     * @param {string} quoteLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public acceptPolicyQuoteUsingPATCH(quoteLocator: string, options?: any) {
        return QuotesApiFp(this.configuration).acceptPolicyQuoteUsingPATCH(quoteLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQuoteFromExistingUsingPOST
     * @param {string} quoteLocator 
     * @param {PolicyQuoteUpdateRequest} [addedChanges] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public createQuoteFromExistingUsingPOST(quoteLocator: string, addedChanges?: PolicyQuoteUpdateRequest, options?: any) {
        return QuotesApiFp(this.configuration).createQuoteFromExistingUsingPOST(quoteLocator, addedChanges, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary discardPolicyQuoteUsingPATCH
     * @param {string} quoteLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public discardPolicyQuoteUsingPATCH(quoteLocator: string, options?: any) {
        return QuotesApiFp(this.configuration).discardPolicyQuoteUsingPATCH(quoteLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary fetchPolicyQuotePriceUsingGET
     * @param {string} quoteLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public fetchPolicyQuotePriceUsingGET(quoteLocator: string, options?: any) {
        return QuotesApiFp(this.configuration).fetchPolicyQuotePriceUsingGET(quoteLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPolicyQuoteByLocatorUsingGET
     * @param {string} quoteLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public getPolicyQuoteByLocatorUsingGET(quoteLocator: string, options?: any) {
        return QuotesApiFp(this.configuration).getPolicyQuoteByLocatorUsingGET(quoteLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary invalidatePolicyQuoteUsingPATCH
     * @param {string} quoteLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public invalidatePolicyQuoteUsingPATCH(quoteLocator: string, options?: any) {
        return QuotesApiFp(this.configuration).invalidatePolicyQuoteUsingPATCH(quoteLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary selectPolicyQuoteUsingPATCH
     * @param {string} quoteLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public selectPolicyQuoteUsingPATCH(quoteLocator: string, options?: any) {
        return QuotesApiFp(this.configuration).selectPolicyQuoteUsingPATCH(quoteLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQuoteUsingPATCH
     * @param {string} quoteLocator 
     * @param {PolicyQuoteUpdateRequest} updateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotesApi
     */
    public updateQuoteUsingPATCH(quoteLocator: string, updateRequest: PolicyQuoteUpdateRequest, options?: any) {
        return QuotesApiFp(this.configuration).updateQuoteUsingPATCH(quoteLocator, updateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
