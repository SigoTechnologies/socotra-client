/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CancellationRequest } from '../model';
// @ts-ignore
import { CancellationResponse } from '../model';
// @ts-ignore
import { EndorsementCreateRequest } from '../model';
// @ts-ignore
import { EndorsementResponse } from '../model';
// @ts-ignore
import { PolicyQuoteResponse } from '../model';
// @ts-ignore
import { PremiumReportCreateRequest } from '../model';
// @ts-ignore
import { PremiumReportResponse } from '../model';
// @ts-ignore
import { RenewalCreateRequest } from '../model';
// @ts-ignore
import { RenewalResponse } from '../model';
/**
 * PoliciesApi - axios parameter creator
 * @export
 */
export const PoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createCancellationUsingPOST
         * @param {string} locator 
         * @param {CancellationRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCancellationUsingPOST: async (locator: string, req: CancellationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('createCancellationUsingPOST', 'locator', locator)
            // verify required parameter 'req' is not null or undefined
            assertParamExists('createCancellationUsingPOST', 'req', req)
            const localVarPath = `/policies/{locator}/cancellations`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(req, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an endorsement....
         * @summary createEndorsementUsingPOST
         * @param {string} policyLocator 
         * @param {EndorsementCreateRequest} endorsementCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEndorsementUsingPOST: async (policyLocator: string, endorsementCreateRequest: EndorsementCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('createEndorsementUsingPOST', 'policyLocator', policyLocator)
            // verify required parameter 'endorsementCreateRequest' is not null or undefined
            assertParamExists('createEndorsementUsingPOST', 'endorsementCreateRequest', endorsementCreateRequest)
            const localVarPath = `/policies/{policyLocator}/endorsements`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(endorsementCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createNewQuoteByPolicyLocatorUsingPOST
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewQuoteByPolicyLocatorUsingPOST: async (policyLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('createNewQuoteByPolicyLocatorUsingPOST', 'policyLocator', policyLocator)
            const localVarPath = `/policies/{policyLocator}/quotes`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an premium-report....
         * @summary createPremiumReportUsingPOST
         * @param {string} policyLocator 
         * @param {PremiumReportCreateRequest} createRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPremiumReportUsingPOST: async (policyLocator: string, createRequest: PremiumReportCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('createPremiumReportUsingPOST', 'policyLocator', policyLocator)
            // verify required parameter 'createRequest' is not null or undefined
            assertParamExists('createPremiumReportUsingPOST', 'createRequest', createRequest)
            const localVarPath = `/policies/{policyLocator}/premiumReports`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createRenewalUsingPOST
         * @param {string} policyLocator 
         * @param {RenewalCreateRequest} renewalCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRenewalUsingPOST: async (policyLocator: string, renewalCreateRequest: RenewalCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('createRenewalUsingPOST', 'policyLocator', policyLocator)
            // verify required parameter 'renewalCreateRequest' is not null or undefined
            assertParamExists('createRenewalUsingPOST', 'renewalCreateRequest', renewalCreateRequest)
            const localVarPath = `/policies/{policyLocator}/renewals`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(renewalCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all endorsements using policy locator.
         * @summary getAllEndorsementsByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEndorsementsByPolicyLocatorUsingGET: async (policyLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('getAllEndorsementsByPolicyLocatorUsingGET', 'policyLocator', policyLocator)
            const localVarPath = `/policies/{policyLocator}/endorsements`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllQuotesByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuotesByPolicyLocatorUsingGET: async (policyLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('getAllQuotesByPolicyLocatorUsingGET', 'policyLocator', policyLocator)
            const localVarPath = `/policies/{policyLocator}/quotes`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllRenewalsByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRenewalsByPolicyLocatorUsingGET: async (policyLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('getAllRenewalsByPolicyLocatorUsingGET', 'policyLocator', policyLocator)
            const localVarPath = `/policies/{policyLocator}/renewals`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPremiumReportsUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPremiumReportsUsingGET: async (policyLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('getPremiumReportsUsingGET', 'policyLocator', policyLocator)
            const localVarPath = `/policies/{policyLocator}/premiumReports`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSelectedQuoteUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelectedQuoteUsingGET: async (policyLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyLocator' is not null or undefined
            assertParamExists('getSelectedQuoteUsingGET', 'policyLocator', policyLocator)
            const localVarPath = `/policies/{policyLocator}/selectedQuote`
                .replace(`{${"policyLocator"}}`, encodeURIComponent(String(policyLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * \"The returned cancellations will \"+\"have the states: draft, issued, reinstated, or expired\"
         * @summary listCancellationsUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCancellationsUsingGET: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('listCancellationsUsingGET', 'locator', locator)
            const localVarPath = `/policies/{locator}/cancellations`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoliciesApi - functional programming interface
 * @export
 */
export const PoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createCancellationUsingPOST
         * @param {string} locator 
         * @param {CancellationRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCancellationUsingPOST(locator: string, req: CancellationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancellationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCancellationUsingPOST(locator, req, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an endorsement....
         * @summary createEndorsementUsingPOST
         * @param {string} policyLocator 
         * @param {EndorsementCreateRequest} endorsementCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEndorsementUsingPOST(policyLocator: string, endorsementCreateRequest: EndorsementCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndorsementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEndorsementUsingPOST(policyLocator, endorsementCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createNewQuoteByPolicyLocatorUsingPOST
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewQuoteByPolicyLocatorUsingPOST(policyLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewQuoteByPolicyLocatorUsingPOST(policyLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an premium-report....
         * @summary createPremiumReportUsingPOST
         * @param {string} policyLocator 
         * @param {PremiumReportCreateRequest} createRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPremiumReportUsingPOST(policyLocator: string, createRequest: PremiumReportCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PremiumReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPremiumReportUsingPOST(policyLocator, createRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createRenewalUsingPOST
         * @param {string} policyLocator 
         * @param {RenewalCreateRequest} renewalCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRenewalUsingPOST(policyLocator: string, renewalCreateRequest: RenewalCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenewalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRenewalUsingPOST(policyLocator, renewalCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all endorsements using policy locator.
         * @summary getAllEndorsementsByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEndorsementsByPolicyLocatorUsingGET(policyLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EndorsementResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEndorsementsByPolicyLocatorUsingGET(policyLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getAllQuotesByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQuotesByPolicyLocatorUsingGET(policyLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PolicyQuoteResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQuotesByPolicyLocatorUsingGET(policyLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getAllRenewalsByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRenewalsByPolicyLocatorUsingGET(policyLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RenewalResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRenewalsByPolicyLocatorUsingGET(policyLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getPremiumReportsUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPremiumReportsUsingGET(policyLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PremiumReportResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPremiumReportsUsingGET(policyLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSelectedQuoteUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelectedQuoteUsingGET(policyLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelectedQuoteUsingGET(policyLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * \"The returned cancellations will \"+\"have the states: draft, issued, reinstated, or expired\"
         * @summary listCancellationsUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCancellationsUsingGET(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CancellationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCancellationsUsingGET(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PoliciesApi - factory interface
 * @export
 */
export const PoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PoliciesApiFp(configuration)
    return {
        /**
         * 
         * @summary createCancellationUsingPOST
         * @param {string} locator 
         * @param {CancellationRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCancellationUsingPOST(locator: string, req: CancellationRequest, options?: any): AxiosPromise<CancellationResponse> {
            return localVarFp.createCancellationUsingPOST(locator, req, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an endorsement....
         * @summary createEndorsementUsingPOST
         * @param {string} policyLocator 
         * @param {EndorsementCreateRequest} endorsementCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEndorsementUsingPOST(policyLocator: string, endorsementCreateRequest: EndorsementCreateRequest, options?: any): AxiosPromise<EndorsementResponse> {
            return localVarFp.createEndorsementUsingPOST(policyLocator, endorsementCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createNewQuoteByPolicyLocatorUsingPOST
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewQuoteByPolicyLocatorUsingPOST(policyLocator: string, options?: any): AxiosPromise<PolicyQuoteResponse> {
            return localVarFp.createNewQuoteByPolicyLocatorUsingPOST(policyLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an premium-report....
         * @summary createPremiumReportUsingPOST
         * @param {string} policyLocator 
         * @param {PremiumReportCreateRequest} createRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPremiumReportUsingPOST(policyLocator: string, createRequest: PremiumReportCreateRequest, options?: any): AxiosPromise<PremiumReportResponse> {
            return localVarFp.createPremiumReportUsingPOST(policyLocator, createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createRenewalUsingPOST
         * @param {string} policyLocator 
         * @param {RenewalCreateRequest} renewalCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRenewalUsingPOST(policyLocator: string, renewalCreateRequest: RenewalCreateRequest, options?: any): AxiosPromise<RenewalResponse> {
            return localVarFp.createRenewalUsingPOST(policyLocator, renewalCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all endorsements using policy locator.
         * @summary getAllEndorsementsByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEndorsementsByPolicyLocatorUsingGET(policyLocator: string, options?: any): AxiosPromise<Array<EndorsementResponse>> {
            return localVarFp.getAllEndorsementsByPolicyLocatorUsingGET(policyLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllQuotesByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuotesByPolicyLocatorUsingGET(policyLocator: string, options?: any): AxiosPromise<Array<PolicyQuoteResponse>> {
            return localVarFp.getAllQuotesByPolicyLocatorUsingGET(policyLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllRenewalsByPolicyLocatorUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRenewalsByPolicyLocatorUsingGET(policyLocator: string, options?: any): AxiosPromise<Array<RenewalResponse>> {
            return localVarFp.getAllRenewalsByPolicyLocatorUsingGET(policyLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPremiumReportsUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPremiumReportsUsingGET(policyLocator: string, options?: any): AxiosPromise<Array<PremiumReportResponse>> {
            return localVarFp.getPremiumReportsUsingGET(policyLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSelectedQuoteUsingGET
         * @param {string} policyLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelectedQuoteUsingGET(policyLocator: string, options?: any): AxiosPromise<PolicyQuoteResponse> {
            return localVarFp.getSelectedQuoteUsingGET(policyLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * \"The returned cancellations will \"+\"have the states: draft, issued, reinstated, or expired\"
         * @summary listCancellationsUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCancellationsUsingGET(locator: string, options?: any): AxiosPromise<Array<CancellationResponse>> {
            return localVarFp.listCancellationsUsingGET(locator, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
export class PoliciesApi extends BaseAPI {
    /**
     * 
     * @summary createCancellationUsingPOST
     * @param {string} locator 
     * @param {CancellationRequest} req 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public createCancellationUsingPOST(locator: string, req: CancellationRequest, options?: any) {
        return PoliciesApiFp(this.configuration).createCancellationUsingPOST(locator, req, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an endorsement....
     * @summary createEndorsementUsingPOST
     * @param {string} policyLocator 
     * @param {EndorsementCreateRequest} endorsementCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public createEndorsementUsingPOST(policyLocator: string, endorsementCreateRequest: EndorsementCreateRequest, options?: any) {
        return PoliciesApiFp(this.configuration).createEndorsementUsingPOST(policyLocator, endorsementCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createNewQuoteByPolicyLocatorUsingPOST
     * @param {string} policyLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public createNewQuoteByPolicyLocatorUsingPOST(policyLocator: string, options?: any) {
        return PoliciesApiFp(this.configuration).createNewQuoteByPolicyLocatorUsingPOST(policyLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an premium-report....
     * @summary createPremiumReportUsingPOST
     * @param {string} policyLocator 
     * @param {PremiumReportCreateRequest} createRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public createPremiumReportUsingPOST(policyLocator: string, createRequest: PremiumReportCreateRequest, options?: any) {
        return PoliciesApiFp(this.configuration).createPremiumReportUsingPOST(policyLocator, createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createRenewalUsingPOST
     * @param {string} policyLocator 
     * @param {RenewalCreateRequest} renewalCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public createRenewalUsingPOST(policyLocator: string, renewalCreateRequest: RenewalCreateRequest, options?: any) {
        return PoliciesApiFp(this.configuration).createRenewalUsingPOST(policyLocator, renewalCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all endorsements using policy locator.
     * @summary getAllEndorsementsByPolicyLocatorUsingGET
     * @param {string} policyLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getAllEndorsementsByPolicyLocatorUsingGET(policyLocator: string, options?: any) {
        return PoliciesApiFp(this.configuration).getAllEndorsementsByPolicyLocatorUsingGET(policyLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllQuotesByPolicyLocatorUsingGET
     * @param {string} policyLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getAllQuotesByPolicyLocatorUsingGET(policyLocator: string, options?: any) {
        return PoliciesApiFp(this.configuration).getAllQuotesByPolicyLocatorUsingGET(policyLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllRenewalsByPolicyLocatorUsingGET
     * @param {string} policyLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getAllRenewalsByPolicyLocatorUsingGET(policyLocator: string, options?: any) {
        return PoliciesApiFp(this.configuration).getAllRenewalsByPolicyLocatorUsingGET(policyLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPremiumReportsUsingGET
     * @param {string} policyLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPremiumReportsUsingGET(policyLocator: string, options?: any) {
        return PoliciesApiFp(this.configuration).getPremiumReportsUsingGET(policyLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSelectedQuoteUsingGET
     * @param {string} policyLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getSelectedQuoteUsingGET(policyLocator: string, options?: any) {
        return PoliciesApiFp(this.configuration).getSelectedQuoteUsingGET(policyLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * \"The returned cancellations will \"+\"have the states: draft, issued, reinstated, or expired\"
     * @summary listCancellationsUsingGET
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public listCancellationsUsingGET(locator: string, options?: any) {
        return PoliciesApiFp(this.configuration).listCancellationsUsingGET(locator, options).then((request) => request(this.axios, this.basePath));
    }
}
