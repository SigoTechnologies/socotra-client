/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AutomatedUnderwritingResultResponse } from '../model';
// @ts-ignore
import { Policy2Response } from '../model';
// @ts-ignore
import { PolicyPriceChangeResponse } from '../model';
// @ts-ignore
import { RenewalActionRequest } from '../model';
// @ts-ignore
import { RenewalResponse } from '../model';
/**
 * RenewalsApi - axios parameter creator
 * @export
 */
export const RenewalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getOneRenewalAutomatedUnderwritingResultUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneRenewalAutomatedUnderwritingResultUsingGET: async (renewalLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'renewalLocator' is not null or undefined
            assertParamExists('getOneRenewalAutomatedUnderwritingResultUsingGET', 'renewalLocator', renewalLocator)
            const localVarPath = `/renewals/{renewalLocator}/automatedUnderwritingResult`
                .replace(`{${"renewalLocator"}}`, encodeURIComponent(String(renewalLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOneRenewalByLocatorUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneRenewalByLocatorUsingGET: async (renewalLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'renewalLocator' is not null or undefined
            assertParamExists('getOneRenewalByLocatorUsingGET', 'renewalLocator', renewalLocator)
            const localVarPath = `/renewals/{renewalLocator}`
                .replace(`{${"renewalLocator"}}`, encodeURIComponent(String(renewalLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOneRenewalPriceChangeUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneRenewalPriceChangeUsingGET: async (renewalLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'renewalLocator' is not null or undefined
            assertParamExists('getOneRenewalPriceChangeUsingGET', 'renewalLocator', renewalLocator)
            const localVarPath = `/renewals/{renewalLocator}/price`
                .replace(`{${"renewalLocator"}}`, encodeURIComponent(String(renewalLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPolicyWithAcceptedRenewalAsIssuedUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyWithAcceptedRenewalAsIssuedUsingGET: async (renewalLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'renewalLocator' is not null or undefined
            assertParamExists('getPolicyWithAcceptedRenewalAsIssuedUsingGET', 'renewalLocator', renewalLocator)
            const localVarPath = `/renewals/{renewalLocator}/policyWhenIssued`
                .replace(`{${"renewalLocator"}}`, encodeURIComponent(String(renewalLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateRenewalUsingPATCH
         * @param {string} renewalLocator 
         * @param {RenewalActionRequest} actionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRenewalUsingPATCH: async (renewalLocator: string, actionRequest: RenewalActionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'renewalLocator' is not null or undefined
            assertParamExists('updateRenewalUsingPATCH', 'renewalLocator', renewalLocator)
            // verify required parameter 'actionRequest' is not null or undefined
            assertParamExists('updateRenewalUsingPATCH', 'actionRequest', actionRequest)
            const localVarPath = `/renewals/{renewalLocator}`
                .replace(`{${"renewalLocator"}}`, encodeURIComponent(String(renewalLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(actionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RenewalsApi - functional programming interface
 * @export
 */
export const RenewalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RenewalsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getOneRenewalAutomatedUnderwritingResultUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneRenewalAutomatedUnderwritingResultUsingGET(renewalLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomatedUnderwritingResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneRenewalAutomatedUnderwritingResultUsingGET(renewalLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOneRenewalByLocatorUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneRenewalByLocatorUsingGET(renewalLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenewalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneRenewalByLocatorUsingGET(renewalLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOneRenewalPriceChangeUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneRenewalPriceChangeUsingGET(renewalLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPriceChangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneRenewalPriceChangeUsingGET(renewalLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getPolicyWithAcceptedRenewalAsIssuedUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyWithAcceptedRenewalAsIssuedUsingGET(renewalLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyWithAcceptedRenewalAsIssuedUsingGET(renewalLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateRenewalUsingPATCH
         * @param {string} renewalLocator 
         * @param {RenewalActionRequest} actionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRenewalUsingPATCH(renewalLocator: string, actionRequest: RenewalActionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenewalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRenewalUsingPATCH(renewalLocator, actionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RenewalsApi - factory interface
 * @export
 */
export const RenewalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RenewalsApiFp(configuration)
    return {
        /**
         * 
         * @summary getOneRenewalAutomatedUnderwritingResultUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneRenewalAutomatedUnderwritingResultUsingGET(renewalLocator: string, options?: any): AxiosPromise<AutomatedUnderwritingResultResponse> {
            return localVarFp.getOneRenewalAutomatedUnderwritingResultUsingGET(renewalLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOneRenewalByLocatorUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneRenewalByLocatorUsingGET(renewalLocator: string, options?: any): AxiosPromise<RenewalResponse> {
            return localVarFp.getOneRenewalByLocatorUsingGET(renewalLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOneRenewalPriceChangeUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneRenewalPriceChangeUsingGET(renewalLocator: string, options?: any): AxiosPromise<PolicyPriceChangeResponse> {
            return localVarFp.getOneRenewalPriceChangeUsingGET(renewalLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPolicyWithAcceptedRenewalAsIssuedUsingGET
         * @param {string} renewalLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyWithAcceptedRenewalAsIssuedUsingGET(renewalLocator: string, options?: any): AxiosPromise<Policy2Response> {
            return localVarFp.getPolicyWithAcceptedRenewalAsIssuedUsingGET(renewalLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateRenewalUsingPATCH
         * @param {string} renewalLocator 
         * @param {RenewalActionRequest} actionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRenewalUsingPATCH(renewalLocator: string, actionRequest: RenewalActionRequest, options?: any): AxiosPromise<RenewalResponse> {
            return localVarFp.updateRenewalUsingPATCH(renewalLocator, actionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RenewalsApi - object-oriented interface
 * @export
 * @class RenewalsApi
 * @extends {BaseAPI}
 */
export class RenewalsApi extends BaseAPI {
    /**
     * 
     * @summary getOneRenewalAutomatedUnderwritingResultUsingGET
     * @param {string} renewalLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RenewalsApi
     */
    public getOneRenewalAutomatedUnderwritingResultUsingGET(renewalLocator: string, options?: any) {
        return RenewalsApiFp(this.configuration).getOneRenewalAutomatedUnderwritingResultUsingGET(renewalLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOneRenewalByLocatorUsingGET
     * @param {string} renewalLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RenewalsApi
     */
    public getOneRenewalByLocatorUsingGET(renewalLocator: string, options?: any) {
        return RenewalsApiFp(this.configuration).getOneRenewalByLocatorUsingGET(renewalLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOneRenewalPriceChangeUsingGET
     * @param {string} renewalLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RenewalsApi
     */
    public getOneRenewalPriceChangeUsingGET(renewalLocator: string, options?: any) {
        return RenewalsApiFp(this.configuration).getOneRenewalPriceChangeUsingGET(renewalLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPolicyWithAcceptedRenewalAsIssuedUsingGET
     * @param {string} renewalLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RenewalsApi
     */
    public getPolicyWithAcceptedRenewalAsIssuedUsingGET(renewalLocator: string, options?: any) {
        return RenewalsApiFp(this.configuration).getPolicyWithAcceptedRenewalAsIssuedUsingGET(renewalLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateRenewalUsingPATCH
     * @param {string} renewalLocator 
     * @param {RenewalActionRequest} actionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RenewalsApi
     */
    public updateRenewalUsingPATCH(renewalLocator: string, actionRequest: RenewalActionRequest, options?: any) {
        return RenewalsApiFp(this.configuration).updateRenewalUsingPATCH(renewalLocator, actionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
