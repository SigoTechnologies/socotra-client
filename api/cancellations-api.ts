/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CancellationResponse } from '../model';
// @ts-ignore
import { CancellationUpdateRequest } from '../model';
// @ts-ignore
import { PolicyPriceChangeResponse } from '../model';
// @ts-ignore
import { ReinstatementRequest } from '../model';
// @ts-ignore
import { ReinstatementResponse } from '../model';
/**
 * CancellationsApi - axios parameter creator
 * @export
 */
export const CancellationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCancellationUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCancellationUsingGET: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('getCancellationUsingGET', 'locator', locator)
            const localVarPath = `/cancellations/{locator}`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * \"This operation is applicable \"+\"to cancellations in the draft state\"
         * @summary issueCancellationUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueCancellationUsingPATCH: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('issueCancellationUsingPATCH', 'locator', locator)
            const localVarPath = `/cancellations/{locator}/issue`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * \"A response \"+\"is computed for cancellations that are both valid at the time of the request \"+\"and which are in one of the states: draft, issued, reinstated.\"
         * @summary priceCancellationUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceCancellationUsingGET: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('priceCancellationUsingGET', 'locator', locator)
            const localVarPath = `/cancellations/{locator}/price`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * \"Cancellations can only have one associated reinstatement and the cancellation must be in the \"+\"issued state for the reinstatement request to be successful.\"
         * @summary reinstateCancellationUsingPATCH
         * @param {string} locator 
         * @param {ReinstatementRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reinstateCancellationUsingPATCH: async (locator: string, req: ReinstatementRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('reinstateCancellationUsingPATCH', 'locator', locator)
            // verify required parameter 'req' is not null or undefined
            assertParamExists('reinstateCancellationUsingPATCH', 'req', req)
            const localVarPath = `/cancellations/{locator}/reinstate`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(req, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * \"This operation acts \"+\"on cancellations in the draft state\"
         * @summary rescindCancellationUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescindCancellationUsingPATCH: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('rescindCancellationUsingPATCH', 'locator', locator)
            const localVarPath = `/cancellations/{locator}/rescind`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * \"For a cancellation to be \"+\"updated it must be in the draft state.\"
         * @summary updateCancellationUsingPATCH
         * @param {string} locator 
         * @param {CancellationUpdateRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCancellationUsingPATCH: async (locator: string, req: CancellationUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('updateCancellationUsingPATCH', 'locator', locator)
            // verify required parameter 'req' is not null or undefined
            assertParamExists('updateCancellationUsingPATCH', 'req', req)
            const localVarPath = `/cancellations/{locator}`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(req, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CancellationsApi - functional programming interface
 * @export
 */
export const CancellationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CancellationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getCancellationUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCancellationUsingGET(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancellationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCancellationUsingGET(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * \"This operation is applicable \"+\"to cancellations in the draft state\"
         * @summary issueCancellationUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issueCancellationUsingPATCH(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancellationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issueCancellationUsingPATCH(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * \"A response \"+\"is computed for cancellations that are both valid at the time of the request \"+\"and which are in one of the states: draft, issued, reinstated.\"
         * @summary priceCancellationUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async priceCancellationUsingGET(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPriceChangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.priceCancellationUsingGET(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * \"Cancellations can only have one associated reinstatement and the cancellation must be in the \"+\"issued state for the reinstatement request to be successful.\"
         * @summary reinstateCancellationUsingPATCH
         * @param {string} locator 
         * @param {ReinstatementRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reinstateCancellationUsingPATCH(locator: string, req: ReinstatementRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reinstateCancellationUsingPATCH(locator, req, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * \"This operation acts \"+\"on cancellations in the draft state\"
         * @summary rescindCancellationUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescindCancellationUsingPATCH(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancellationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rescindCancellationUsingPATCH(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * \"For a cancellation to be \"+\"updated it must be in the draft state.\"
         * @summary updateCancellationUsingPATCH
         * @param {string} locator 
         * @param {CancellationUpdateRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCancellationUsingPATCH(locator: string, req: CancellationUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancellationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCancellationUsingPATCH(locator, req, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CancellationsApi - factory interface
 * @export
 */
export const CancellationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CancellationsApiFp(configuration)
    return {
        /**
         * 
         * @summary getCancellationUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCancellationUsingGET(locator: string, options?: any): AxiosPromise<CancellationResponse> {
            return localVarFp.getCancellationUsingGET(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * \"This operation is applicable \"+\"to cancellations in the draft state\"
         * @summary issueCancellationUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueCancellationUsingPATCH(locator: string, options?: any): AxiosPromise<CancellationResponse> {
            return localVarFp.issueCancellationUsingPATCH(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * \"A response \"+\"is computed for cancellations that are both valid at the time of the request \"+\"and which are in one of the states: draft, issued, reinstated.\"
         * @summary priceCancellationUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceCancellationUsingGET(locator: string, options?: any): AxiosPromise<PolicyPriceChangeResponse> {
            return localVarFp.priceCancellationUsingGET(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * \"Cancellations can only have one associated reinstatement and the cancellation must be in the \"+\"issued state for the reinstatement request to be successful.\"
         * @summary reinstateCancellationUsingPATCH
         * @param {string} locator 
         * @param {ReinstatementRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reinstateCancellationUsingPATCH(locator: string, req: ReinstatementRequest, options?: any): AxiosPromise<ReinstatementResponse> {
            return localVarFp.reinstateCancellationUsingPATCH(locator, req, options).then((request) => request(axios, basePath));
        },
        /**
         * \"This operation acts \"+\"on cancellations in the draft state\"
         * @summary rescindCancellationUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescindCancellationUsingPATCH(locator: string, options?: any): AxiosPromise<CancellationResponse> {
            return localVarFp.rescindCancellationUsingPATCH(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * \"For a cancellation to be \"+\"updated it must be in the draft state.\"
         * @summary updateCancellationUsingPATCH
         * @param {string} locator 
         * @param {CancellationUpdateRequest} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCancellationUsingPATCH(locator: string, req: CancellationUpdateRequest, options?: any): AxiosPromise<CancellationResponse> {
            return localVarFp.updateCancellationUsingPATCH(locator, req, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CancellationsApi - object-oriented interface
 * @export
 * @class CancellationsApi
 * @extends {BaseAPI}
 */
export class CancellationsApi extends BaseAPI {
    /**
     * 
     * @summary getCancellationUsingGET
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationsApi
     */
    public getCancellationUsingGET(locator: string, options?: any) {
        return CancellationsApiFp(this.configuration).getCancellationUsingGET(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * \"This operation is applicable \"+\"to cancellations in the draft state\"
     * @summary issueCancellationUsingPATCH
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationsApi
     */
    public issueCancellationUsingPATCH(locator: string, options?: any) {
        return CancellationsApiFp(this.configuration).issueCancellationUsingPATCH(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * \"A response \"+\"is computed for cancellations that are both valid at the time of the request \"+\"and which are in one of the states: draft, issued, reinstated.\"
     * @summary priceCancellationUsingGET
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationsApi
     */
    public priceCancellationUsingGET(locator: string, options?: any) {
        return CancellationsApiFp(this.configuration).priceCancellationUsingGET(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * \"Cancellations can only have one associated reinstatement and the cancellation must be in the \"+\"issued state for the reinstatement request to be successful.\"
     * @summary reinstateCancellationUsingPATCH
     * @param {string} locator 
     * @param {ReinstatementRequest} req 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationsApi
     */
    public reinstateCancellationUsingPATCH(locator: string, req: ReinstatementRequest, options?: any) {
        return CancellationsApiFp(this.configuration).reinstateCancellationUsingPATCH(locator, req, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * \"This operation acts \"+\"on cancellations in the draft state\"
     * @summary rescindCancellationUsingPATCH
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationsApi
     */
    public rescindCancellationUsingPATCH(locator: string, options?: any) {
        return CancellationsApiFp(this.configuration).rescindCancellationUsingPATCH(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * \"For a cancellation to be \"+\"updated it must be in the draft state.\"
     * @summary updateCancellationUsingPATCH
     * @param {string} locator 
     * @param {CancellationUpdateRequest} req 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationsApi
     */
    public updateCancellationUsingPATCH(locator: string, req: CancellationUpdateRequest, options?: any) {
        return CancellationsApiFp(this.configuration).updateCancellationUsingPATCH(locator, req, options).then((request) => request(this.axios, this.basePath));
    }
}
