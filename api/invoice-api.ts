/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetInvoiceFinancialTransactionsResponse } from '../model';
// @ts-ignore
import { PaymentCreateRequest } from '../model';
// @ts-ignore
import { PaymentResponse2 } from '../model';
// @ts-ignore
import { PolicyInvoice2Response } from '../model';
/**
 * InvoiceApi - axios parameter creator
 * @export
 */
export const InvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getFinancialTransactionsForInvoiceUsingGET
         * @param {string} invoiceLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialTransactionsForInvoiceUsingGET: async (invoiceLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceLocator' is not null or undefined
            assertParamExists('getFinancialTransactionsForInvoiceUsingGET', 'invoiceLocator', invoiceLocator)
            const localVarPath = `/invoice/{invoiceLocator}/financialTransactions`
                .replace(`{${"invoiceLocator"}}`, encodeURIComponent(String(invoiceLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getInvoiceUsingGET
         * @param {string} invoiceLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoiceUsingGET: async (invoiceLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceLocator' is not null or undefined
            assertParamExists('getInvoiceUsingGET', 'invoiceLocator', invoiceLocator)
            const localVarPath = `/invoice/{invoiceLocator}`
                .replace(`{${"invoiceLocator"}}`, encodeURIComponent(String(invoiceLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary payInvoice2UsingPOST
         * @param {string} invoiceLocator 
         * @param {PaymentCreateRequest} [paymentCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payInvoice2UsingPOST: async (invoiceLocator: string, paymentCreateRequest?: PaymentCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceLocator' is not null or undefined
            assertParamExists('payInvoice2UsingPOST', 'invoiceLocator', invoiceLocator)
            const localVarPath = `/invoice/{invoiceLocator}/pay`
                .replace(`{${"invoiceLocator"}}`, encodeURIComponent(String(invoiceLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoiceApi - functional programming interface
 * @export
 */
export const InvoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getFinancialTransactionsForInvoiceUsingGET
         * @param {string} invoiceLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialTransactionsForInvoiceUsingGET(invoiceLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoiceFinancialTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialTransactionsForInvoiceUsingGET(invoiceLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getInvoiceUsingGET
         * @param {string} invoiceLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoiceUsingGET(invoiceLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyInvoice2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoiceUsingGET(invoiceLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary payInvoice2UsingPOST
         * @param {string} invoiceLocator 
         * @param {PaymentCreateRequest} [paymentCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payInvoice2UsingPOST(invoiceLocator: string, paymentCreateRequest?: PaymentCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentResponse2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payInvoice2UsingPOST(invoiceLocator, paymentCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoiceApi - factory interface
 * @export
 */
export const InvoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoiceApiFp(configuration)
    return {
        /**
         * 
         * @summary getFinancialTransactionsForInvoiceUsingGET
         * @param {string} invoiceLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialTransactionsForInvoiceUsingGET(invoiceLocator: string, options?: any): AxiosPromise<GetInvoiceFinancialTransactionsResponse> {
            return localVarFp.getFinancialTransactionsForInvoiceUsingGET(invoiceLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getInvoiceUsingGET
         * @param {string} invoiceLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoiceUsingGET(invoiceLocator: string, options?: any): AxiosPromise<PolicyInvoice2Response> {
            return localVarFp.getInvoiceUsingGET(invoiceLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary payInvoice2UsingPOST
         * @param {string} invoiceLocator 
         * @param {PaymentCreateRequest} [paymentCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payInvoice2UsingPOST(invoiceLocator: string, paymentCreateRequest?: PaymentCreateRequest, options?: any): AxiosPromise<PaymentResponse2> {
            return localVarFp.payInvoice2UsingPOST(invoiceLocator, paymentCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoiceApi - object-oriented interface
 * @export
 * @class InvoiceApi
 * @extends {BaseAPI}
 */
export class InvoiceApi extends BaseAPI {
    /**
     * 
     * @summary getFinancialTransactionsForInvoiceUsingGET
     * @param {string} invoiceLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public getFinancialTransactionsForInvoiceUsingGET(invoiceLocator: string, options?: any) {
        return InvoiceApiFp(this.configuration).getFinancialTransactionsForInvoiceUsingGET(invoiceLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getInvoiceUsingGET
     * @param {string} invoiceLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public getInvoiceUsingGET(invoiceLocator: string, options?: any) {
        return InvoiceApiFp(this.configuration).getInvoiceUsingGET(invoiceLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary payInvoice2UsingPOST
     * @param {string} invoiceLocator 
     * @param {PaymentCreateRequest} [paymentCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public payInvoice2UsingPOST(invoiceLocator: string, paymentCreateRequest?: PaymentCreateRequest, options?: any) {
        return InvoiceApiFp(this.configuration).payInvoice2UsingPOST(invoiceLocator, paymentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
