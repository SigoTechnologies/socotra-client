/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TenantAssetsResponse } from '../model';
/**
 * StorageCustomizationApi - axios parameter creator
 * @export
 */
export const StorageCustomizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * \"This API endpoint \"+\"allows users to upload custom web files to the Socotra systems. These custom \"+\"web files are used by Socotra\'s policy management application, and allow users \"+\"the ability to modify the policy management display. The credentials used to upload the file should \"+\"be those of a user who has account.tenant.admin permissions. Example code for the upload \"+\"can be obtained from your account representative.\"
         * @summary addCustomWebAssetsUsingPOST
         * @param {string} hostname \&quot;The hostname for which the user \&quot;+\&quot;would like the web resource files to be available. This value should not contain \&quot;+\&quot;protocol or path elements.\&quot;
         * @param {any} file \\\&quot;\\\&quot;+\\\&quot;A web resource file, uploaded as a multipart-encoded file. The API user should \\\&quot;+\\\&quot;explicitly set the \\\&#39;filename\\\&#39; parameter of the uploaded file to one of the \\\&quot;+\\\&quot;accepted file names. Currently the accepted file names are \\\&#39;styles.css\\\&#39; \\\&quot;+\\\&quot;or logo.png.\\\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomWebAssetsUsingPOST: async (hostname: string, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostname' is not null or undefined
            assertParamExists('addCustomWebAssetsUsingPOST', 'hostname', hostname)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('addCustomWebAssetsUsingPOST', 'file', file)
            const localVarPath = `/tenantassets/v1/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (hostname !== undefined) {
                localVarQueryParameter['hostname'] = hostname;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageCustomizationApi - functional programming interface
 * @export
 */
export const StorageCustomizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageCustomizationApiAxiosParamCreator(configuration)
    return {
        /**
         * \"This API endpoint \"+\"allows users to upload custom web files to the Socotra systems. These custom \"+\"web files are used by Socotra\'s policy management application, and allow users \"+\"the ability to modify the policy management display. The credentials used to upload the file should \"+\"be those of a user who has account.tenant.admin permissions. Example code for the upload \"+\"can be obtained from your account representative.\"
         * @summary addCustomWebAssetsUsingPOST
         * @param {string} hostname \&quot;The hostname for which the user \&quot;+\&quot;would like the web resource files to be available. This value should not contain \&quot;+\&quot;protocol or path elements.\&quot;
         * @param {any} file \\\&quot;\\\&quot;+\\\&quot;A web resource file, uploaded as a multipart-encoded file. The API user should \\\&quot;+\\\&quot;explicitly set the \\\&#39;filename\\\&#39; parameter of the uploaded file to one of the \\\&quot;+\\\&quot;accepted file names. Currently the accepted file names are \\\&#39;styles.css\\\&#39; \\\&quot;+\\\&quot;or logo.png.\\\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomWebAssetsUsingPOST(hostname: string, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomWebAssetsUsingPOST(hostname, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StorageCustomizationApi - factory interface
 * @export
 */
export const StorageCustomizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageCustomizationApiFp(configuration)
    return {
        /**
         * \"This API endpoint \"+\"allows users to upload custom web files to the Socotra systems. These custom \"+\"web files are used by Socotra\'s policy management application, and allow users \"+\"the ability to modify the policy management display. The credentials used to upload the file should \"+\"be those of a user who has account.tenant.admin permissions. Example code for the upload \"+\"can be obtained from your account representative.\"
         * @summary addCustomWebAssetsUsingPOST
         * @param {string} hostname \&quot;The hostname for which the user \&quot;+\&quot;would like the web resource files to be available. This value should not contain \&quot;+\&quot;protocol or path elements.\&quot;
         * @param {any} file \\\&quot;\\\&quot;+\\\&quot;A web resource file, uploaded as a multipart-encoded file. The API user should \\\&quot;+\\\&quot;explicitly set the \\\&#39;filename\\\&#39; parameter of the uploaded file to one of the \\\&quot;+\\\&quot;accepted file names. Currently the accepted file names are \\\&#39;styles.css\\\&#39; \\\&quot;+\\\&quot;or logo.png.\\\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomWebAssetsUsingPOST(hostname: string, file: any, options?: any): AxiosPromise<TenantAssetsResponse> {
            return localVarFp.addCustomWebAssetsUsingPOST(hostname, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StorageCustomizationApi - object-oriented interface
 * @export
 * @class StorageCustomizationApi
 * @extends {BaseAPI}
 */
export class StorageCustomizationApi extends BaseAPI {
    /**
     * \"This API endpoint \"+\"allows users to upload custom web files to the Socotra systems. These custom \"+\"web files are used by Socotra\'s policy management application, and allow users \"+\"the ability to modify the policy management display. The credentials used to upload the file should \"+\"be those of a user who has account.tenant.admin permissions. Example code for the upload \"+\"can be obtained from your account representative.\"
     * @summary addCustomWebAssetsUsingPOST
     * @param {string} hostname \&quot;The hostname for which the user \&quot;+\&quot;would like the web resource files to be available. This value should not contain \&quot;+\&quot;protocol or path elements.\&quot;
     * @param {any} file \\\&quot;\\\&quot;+\\\&quot;A web resource file, uploaded as a multipart-encoded file. The API user should \\\&quot;+\\\&quot;explicitly set the \\\&#39;filename\\\&#39; parameter of the uploaded file to one of the \\\&quot;+\\\&quot;accepted file names. Currently the accepted file names are \\\&#39;styles.css\\\&#39; \\\&quot;+\\\&quot;or logo.png.\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageCustomizationApi
     */
    public addCustomWebAssetsUsingPOST(hostname: string, file: any, options?: any) {
        return StorageCustomizationApiFp(this.configuration).addCustomWebAssetsUsingPOST(hostname, file, options).then((request) => request(this.axios, this.basePath));
    }
}
