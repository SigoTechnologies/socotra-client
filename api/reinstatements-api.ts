/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PolicyPriceChangeResponse } from '../model';
// @ts-ignore
import { ReinstatementResponse } from '../model';
/**
 * ReinstatementsApi - axios parameter creator
 * @export
 */
export const ReinstatementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation acts on reinstatements in the draft state
         * @summary acceptReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptReinstatementUsingPATCH: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('acceptReinstatementUsingPATCH', 'locator', locator)
            const localVarPath = `/reinstatements/{locator}/accept`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getReinstatementUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReinstatementUsingGET: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('getReinstatementUsingGET', 'locator', locator)
            const localVarPath = `/reinstatements/{locator}`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * \"This operation acts on reinstatements in the accept state, and reverts them to the  \"+\"draft state, deleting any generated documents and invoices.\"
         * @summary invalidateReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateReinstatementUsingPATCH: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('invalidateReinstatementUsingPATCH', 'locator', locator)
            const localVarPath = `/reinstatements/{locator}/invalidate`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This operation acts on reinstatements in the accept state. 
         * @summary issueReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueReinstatementUsingPATCH: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('issueReinstatementUsingPATCH', 'locator', locator)
            const localVarPath = `/reinstatements/{locator}/issue`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary priceReinstatementUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceReinstatementUsingGET: async (locator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('priceReinstatementUsingGET', 'locator', locator)
            const localVarPath = `/reinstatements/{locator}/price`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateReinstatementUsingPATCH
         * @param {string} locator 
         * @param {object} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReinstatementUsingPATCH: async (locator: string, req: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locator' is not null or undefined
            assertParamExists('updateReinstatementUsingPATCH', 'locator', locator)
            // verify required parameter 'req' is not null or undefined
            assertParamExists('updateReinstatementUsingPATCH', 'req', req)
            const localVarPath = `/reinstatements/{locator}`
                .replace(`{${"locator"}}`, encodeURIComponent(String(locator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(req, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReinstatementsApi - functional programming interface
 * @export
 */
export const ReinstatementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReinstatementsApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation acts on reinstatements in the draft state
         * @summary acceptReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptReinstatementUsingPATCH(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptReinstatementUsingPATCH(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getReinstatementUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReinstatementUsingGET(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReinstatementUsingGET(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * \"This operation acts on reinstatements in the accept state, and reverts them to the  \"+\"draft state, deleting any generated documents and invoices.\"
         * @summary invalidateReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invalidateReinstatementUsingPATCH(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invalidateReinstatementUsingPATCH(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This operation acts on reinstatements in the accept state. 
         * @summary issueReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issueReinstatementUsingPATCH(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issueReinstatementUsingPATCH(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary priceReinstatementUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async priceReinstatementUsingGET(locator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPriceChangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.priceReinstatementUsingGET(locator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateReinstatementUsingPATCH
         * @param {string} locator 
         * @param {object} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReinstatementUsingPATCH(locator: string, req: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReinstatementUsingPATCH(locator, req, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReinstatementsApi - factory interface
 * @export
 */
export const ReinstatementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReinstatementsApiFp(configuration)
    return {
        /**
         * This operation acts on reinstatements in the draft state
         * @summary acceptReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptReinstatementUsingPATCH(locator: string, options?: any): AxiosPromise<ReinstatementResponse> {
            return localVarFp.acceptReinstatementUsingPATCH(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getReinstatementUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReinstatementUsingGET(locator: string, options?: any): AxiosPromise<ReinstatementResponse> {
            return localVarFp.getReinstatementUsingGET(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * \"This operation acts on reinstatements in the accept state, and reverts them to the  \"+\"draft state, deleting any generated documents and invoices.\"
         * @summary invalidateReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateReinstatementUsingPATCH(locator: string, options?: any): AxiosPromise<ReinstatementResponse> {
            return localVarFp.invalidateReinstatementUsingPATCH(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * This operation acts on reinstatements in the accept state. 
         * @summary issueReinstatementUsingPATCH
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueReinstatementUsingPATCH(locator: string, options?: any): AxiosPromise<ReinstatementResponse> {
            return localVarFp.issueReinstatementUsingPATCH(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary priceReinstatementUsingGET
         * @param {string} locator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceReinstatementUsingGET(locator: string, options?: any): AxiosPromise<PolicyPriceChangeResponse> {
            return localVarFp.priceReinstatementUsingGET(locator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateReinstatementUsingPATCH
         * @param {string} locator 
         * @param {object} req 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReinstatementUsingPATCH(locator: string, req: object, options?: any): AxiosPromise<ReinstatementResponse> {
            return localVarFp.updateReinstatementUsingPATCH(locator, req, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReinstatementsApi - object-oriented interface
 * @export
 * @class ReinstatementsApi
 * @extends {BaseAPI}
 */
export class ReinstatementsApi extends BaseAPI {
    /**
     * This operation acts on reinstatements in the draft state
     * @summary acceptReinstatementUsingPATCH
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementsApi
     */
    public acceptReinstatementUsingPATCH(locator: string, options?: any) {
        return ReinstatementsApiFp(this.configuration).acceptReinstatementUsingPATCH(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getReinstatementUsingGET
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementsApi
     */
    public getReinstatementUsingGET(locator: string, options?: any) {
        return ReinstatementsApiFp(this.configuration).getReinstatementUsingGET(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * \"This operation acts on reinstatements in the accept state, and reverts them to the  \"+\"draft state, deleting any generated documents and invoices.\"
     * @summary invalidateReinstatementUsingPATCH
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementsApi
     */
    public invalidateReinstatementUsingPATCH(locator: string, options?: any) {
        return ReinstatementsApiFp(this.configuration).invalidateReinstatementUsingPATCH(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This operation acts on reinstatements in the accept state. 
     * @summary issueReinstatementUsingPATCH
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementsApi
     */
    public issueReinstatementUsingPATCH(locator: string, options?: any) {
        return ReinstatementsApiFp(this.configuration).issueReinstatementUsingPATCH(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary priceReinstatementUsingGET
     * @param {string} locator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementsApi
     */
    public priceReinstatementUsingGET(locator: string, options?: any) {
        return ReinstatementsApiFp(this.configuration).priceReinstatementUsingGET(locator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateReinstatementUsingPATCH
     * @param {string} locator 
     * @param {object} req 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementsApi
     */
    public updateReinstatementUsingPATCH(locator: string, req: object, options?: any) {
        return ReinstatementsApiFp(this.configuration).updateReinstatementUsingPATCH(locator, req, options).then((request) => request(this.axios, this.basePath));
    }
}
