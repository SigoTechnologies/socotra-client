/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AutomatedUnderwritingResultResponse } from '../model';
// @ts-ignore
import { EndorsementActionRequest } from '../model';
// @ts-ignore
import { EndorsementResponse } from '../model';
// @ts-ignore
import { Policy2Response } from '../model';
// @ts-ignore
import { PolicyPriceChangeResponse } from '../model';
/**
 * EndorsementsApi - axios parameter creator
 * @export
 */
export const EndorsementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getOneEndorsementAutomatedUnderwritingResultUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneEndorsementAutomatedUnderwritingResultUsingGET: async (endorsementLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endorsementLocator' is not null or undefined
            assertParamExists('getOneEndorsementAutomatedUnderwritingResultUsingGET', 'endorsementLocator', endorsementLocator)
            const localVarPath = `/endorsements/{endorsementLocator}/automatedUnderwritingResult`
                .replace(`{${"endorsementLocator"}}`, encodeURIComponent(String(endorsementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOneEndorsementByLocatorUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneEndorsementByLocatorUsingGET: async (endorsementLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endorsementLocator' is not null or undefined
            assertParamExists('getOneEndorsementByLocatorUsingGET', 'endorsementLocator', endorsementLocator)
            const localVarPath = `/endorsements/{endorsementLocator}`
                .replace(`{${"endorsementLocator"}}`, encodeURIComponent(String(endorsementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOneEndorsementPriceChangeUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneEndorsementPriceChangeUsingGET: async (endorsementLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endorsementLocator' is not null or undefined
            assertParamExists('getOneEndorsementPriceChangeUsingGET', 'endorsementLocator', endorsementLocator)
            const localVarPath = `/endorsements/{endorsementLocator}/price`
                .replace(`{${"endorsementLocator"}}`, encodeURIComponent(String(endorsementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPolicyWithAcceptedEndorsementAsIssuedUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyWithAcceptedEndorsementAsIssuedUsingGET: async (endorsementLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endorsementLocator' is not null or undefined
            assertParamExists('getPolicyWithAcceptedEndorsementAsIssuedUsingGET', 'endorsementLocator', endorsementLocator)
            const localVarPath = `/endorsements/{endorsementLocator}/policyWhenIssued`
                .replace(`{${"endorsementLocator"}}`, encodeURIComponent(String(endorsementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateEndorsementUsingPATCH
         * @param {string} endorsementLocator 
         * @param {EndorsementActionRequest} actionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndorsementUsingPATCH: async (endorsementLocator: string, actionRequest: EndorsementActionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endorsementLocator' is not null or undefined
            assertParamExists('updateEndorsementUsingPATCH', 'endorsementLocator', endorsementLocator)
            // verify required parameter 'actionRequest' is not null or undefined
            assertParamExists('updateEndorsementUsingPATCH', 'actionRequest', actionRequest)
            const localVarPath = `/endorsements/{endorsementLocator}`
                .replace(`{${"endorsementLocator"}}`, encodeURIComponent(String(endorsementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(actionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndorsementsApi - functional programming interface
 * @export
 */
export const EndorsementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndorsementsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getOneEndorsementAutomatedUnderwritingResultUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneEndorsementAutomatedUnderwritingResultUsingGET(endorsementLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomatedUnderwritingResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneEndorsementAutomatedUnderwritingResultUsingGET(endorsementLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOneEndorsementByLocatorUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneEndorsementByLocatorUsingGET(endorsementLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndorsementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneEndorsementByLocatorUsingGET(endorsementLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOneEndorsementPriceChangeUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneEndorsementPriceChangeUsingGET(endorsementLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPriceChangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneEndorsementPriceChangeUsingGET(endorsementLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getPolicyWithAcceptedEndorsementAsIssuedUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyWithAcceptedEndorsementAsIssuedUsingGET(endorsementLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyWithAcceptedEndorsementAsIssuedUsingGET(endorsementLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateEndorsementUsingPATCH
         * @param {string} endorsementLocator 
         * @param {EndorsementActionRequest} actionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEndorsementUsingPATCH(endorsementLocator: string, actionRequest: EndorsementActionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndorsementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEndorsementUsingPATCH(endorsementLocator, actionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndorsementsApi - factory interface
 * @export
 */
export const EndorsementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndorsementsApiFp(configuration)
    return {
        /**
         * 
         * @summary getOneEndorsementAutomatedUnderwritingResultUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneEndorsementAutomatedUnderwritingResultUsingGET(endorsementLocator: string, options?: any): AxiosPromise<AutomatedUnderwritingResultResponse> {
            return localVarFp.getOneEndorsementAutomatedUnderwritingResultUsingGET(endorsementLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOneEndorsementByLocatorUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneEndorsementByLocatorUsingGET(endorsementLocator: string, options?: any): AxiosPromise<EndorsementResponse> {
            return localVarFp.getOneEndorsementByLocatorUsingGET(endorsementLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOneEndorsementPriceChangeUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneEndorsementPriceChangeUsingGET(endorsementLocator: string, options?: any): AxiosPromise<PolicyPriceChangeResponse> {
            return localVarFp.getOneEndorsementPriceChangeUsingGET(endorsementLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPolicyWithAcceptedEndorsementAsIssuedUsingGET
         * @param {string} endorsementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyWithAcceptedEndorsementAsIssuedUsingGET(endorsementLocator: string, options?: any): AxiosPromise<Policy2Response> {
            return localVarFp.getPolicyWithAcceptedEndorsementAsIssuedUsingGET(endorsementLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateEndorsementUsingPATCH
         * @param {string} endorsementLocator 
         * @param {EndorsementActionRequest} actionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndorsementUsingPATCH(endorsementLocator: string, actionRequest: EndorsementActionRequest, options?: any): AxiosPromise<EndorsementResponse> {
            return localVarFp.updateEndorsementUsingPATCH(endorsementLocator, actionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndorsementsApi - object-oriented interface
 * @export
 * @class EndorsementsApi
 * @extends {BaseAPI}
 */
export class EndorsementsApi extends BaseAPI {
    /**
     * 
     * @summary getOneEndorsementAutomatedUnderwritingResultUsingGET
     * @param {string} endorsementLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndorsementsApi
     */
    public getOneEndorsementAutomatedUnderwritingResultUsingGET(endorsementLocator: string, options?: any) {
        return EndorsementsApiFp(this.configuration).getOneEndorsementAutomatedUnderwritingResultUsingGET(endorsementLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOneEndorsementByLocatorUsingGET
     * @param {string} endorsementLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndorsementsApi
     */
    public getOneEndorsementByLocatorUsingGET(endorsementLocator: string, options?: any) {
        return EndorsementsApiFp(this.configuration).getOneEndorsementByLocatorUsingGET(endorsementLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOneEndorsementPriceChangeUsingGET
     * @param {string} endorsementLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndorsementsApi
     */
    public getOneEndorsementPriceChangeUsingGET(endorsementLocator: string, options?: any) {
        return EndorsementsApiFp(this.configuration).getOneEndorsementPriceChangeUsingGET(endorsementLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPolicyWithAcceptedEndorsementAsIssuedUsingGET
     * @param {string} endorsementLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndorsementsApi
     */
    public getPolicyWithAcceptedEndorsementAsIssuedUsingGET(endorsementLocator: string, options?: any) {
        return EndorsementsApiFp(this.configuration).getPolicyWithAcceptedEndorsementAsIssuedUsingGET(endorsementLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateEndorsementUsingPATCH
     * @param {string} endorsementLocator 
     * @param {EndorsementActionRequest} actionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndorsementsApi
     */
    public updateEndorsementUsingPATCH(endorsementLocator: string, actionRequest: EndorsementActionRequest, options?: any) {
        return EndorsementsApiFp(this.configuration).updateEndorsementUsingPATCH(endorsementLocator, actionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
