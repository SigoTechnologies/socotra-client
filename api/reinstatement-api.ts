/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LapseReinstatementResponse } from '../model';
// @ts-ignore
import { ReinstatementAmountDueResponse } from '../model';
// @ts-ignore
import { ReinstatementDocumentRemoveRequest } from '../model';
/**
 * ReinstatementApi - axios parameter creator
 * @export
 */
export const ReinstatementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addDocumentToReinstatementUsingPOST
         * @param {string} displayName 
         * @param {string} documentType 
         * @param {string} reinstatementLocator 
         * @param {any} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocumentToReinstatementUsingPOST: async (displayName: string, documentType: string, reinstatementLocator: string, document: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'displayName' is not null or undefined
            assertParamExists('addDocumentToReinstatementUsingPOST', 'displayName', displayName)
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('addDocumentToReinstatementUsingPOST', 'documentType', documentType)
            // verify required parameter 'reinstatementLocator' is not null or undefined
            assertParamExists('addDocumentToReinstatementUsingPOST', 'reinstatementLocator', reinstatementLocator)
            // verify required parameter 'document' is not null or undefined
            assertParamExists('addDocumentToReinstatementUsingPOST', 'document', document)
            const localVarPath = `/reinstatement/{reinstatementLocator}/addDocument`
                .replace(`{${"reinstatementLocator"}}`, encodeURIComponent(String(reinstatementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (documentType !== undefined) {
                localVarQueryParameter['documentType'] = documentType;
            }


            if (document !== undefined) { 
                localVarFormParams.append('document', document as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary closeReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeReinstatementUsingPOST: async (reinstatementLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reinstatementLocator' is not null or undefined
            assertParamExists('closeReinstatementUsingPOST', 'reinstatementLocator', reinstatementLocator)
            const localVarPath = `/reinstatement/{reinstatementLocator}/close`
                .replace(`{${"reinstatementLocator"}}`, encodeURIComponent(String(reinstatementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getReinstatementAmountDueUsingPOST
         * @param {string} reinstatementLocator 
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReinstatementAmountDueUsingPOST: async (reinstatementLocator: string, request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reinstatementLocator' is not null or undefined
            assertParamExists('getReinstatementAmountDueUsingPOST', 'reinstatementLocator', reinstatementLocator)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('getReinstatementAmountDueUsingPOST', 'request', request)
            const localVarPath = `/reinstatement/{reinstatementLocator}/amountDue`
                .replace(`{${"reinstatementLocator"}}`, encodeURIComponent(String(reinstatementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getReinstatementByLocatorUsingGET
         * @param {string} reinstatementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReinstatementByLocatorUsingGET: async (reinstatementLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reinstatementLocator' is not null or undefined
            assertParamExists('getReinstatementByLocatorUsingGET', 'reinstatementLocator', reinstatementLocator)
            const localVarPath = `/reinstatement/{reinstatementLocator}`
                .replace(`{${"reinstatementLocator"}}`, encodeURIComponent(String(reinstatementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary invoiceReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoiceReinstatementUsingPOST: async (reinstatementLocator: string, request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reinstatementLocator' is not null or undefined
            assertParamExists('invoiceReinstatementUsingPOST', 'reinstatementLocator', reinstatementLocator)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('invoiceReinstatementUsingPOST', 'request', request)
            const localVarPath = `/reinstatement/{reinstatementLocator}/invoice`
                .replace(`{${"reinstatementLocator"}}`, encodeURIComponent(String(reinstatementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeDocumentFromReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {ReinstatementDocumentRemoveRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDocumentFromReinstatementUsingPOST: async (reinstatementLocator: string, request: ReinstatementDocumentRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reinstatementLocator' is not null or undefined
            assertParamExists('removeDocumentFromReinstatementUsingPOST', 'reinstatementLocator', reinstatementLocator)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('removeDocumentFromReinstatementUsingPOST', 'request', request)
            const localVarPath = `/reinstatement/{reinstatementLocator}/removeDocument`
                .replace(`{${"reinstatementLocator"}}`, encodeURIComponent(String(reinstatementLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReinstatementApi - functional programming interface
 * @export
 */
export const ReinstatementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReinstatementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addDocumentToReinstatementUsingPOST
         * @param {string} displayName 
         * @param {string} documentType 
         * @param {string} reinstatementLocator 
         * @param {any} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDocumentToReinstatementUsingPOST(displayName: string, documentType: string, reinstatementLocator: string, document: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LapseReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDocumentToReinstatementUsingPOST(displayName, documentType, reinstatementLocator, document, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary closeReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeReinstatementUsingPOST(reinstatementLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LapseReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.closeReinstatementUsingPOST(reinstatementLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getReinstatementAmountDueUsingPOST
         * @param {string} reinstatementLocator 
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReinstatementAmountDueUsingPOST(reinstatementLocator: string, request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReinstatementAmountDueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReinstatementAmountDueUsingPOST(reinstatementLocator, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getReinstatementByLocatorUsingGET
         * @param {string} reinstatementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReinstatementByLocatorUsingGET(reinstatementLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LapseReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReinstatementByLocatorUsingGET(reinstatementLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary invoiceReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoiceReinstatementUsingPOST(reinstatementLocator: string, request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LapseReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoiceReinstatementUsingPOST(reinstatementLocator, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary removeDocumentFromReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {ReinstatementDocumentRemoveRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDocumentFromReinstatementUsingPOST(reinstatementLocator: string, request: ReinstatementDocumentRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LapseReinstatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDocumentFromReinstatementUsingPOST(reinstatementLocator, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReinstatementApi - factory interface
 * @export
 */
export const ReinstatementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReinstatementApiFp(configuration)
    return {
        /**
         * 
         * @summary addDocumentToReinstatementUsingPOST
         * @param {string} displayName 
         * @param {string} documentType 
         * @param {string} reinstatementLocator 
         * @param {any} document 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocumentToReinstatementUsingPOST(displayName: string, documentType: string, reinstatementLocator: string, document: any, options?: any): AxiosPromise<LapseReinstatementResponse> {
            return localVarFp.addDocumentToReinstatementUsingPOST(displayName, documentType, reinstatementLocator, document, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary closeReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeReinstatementUsingPOST(reinstatementLocator: string, options?: any): AxiosPromise<LapseReinstatementResponse> {
            return localVarFp.closeReinstatementUsingPOST(reinstatementLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getReinstatementAmountDueUsingPOST
         * @param {string} reinstatementLocator 
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReinstatementAmountDueUsingPOST(reinstatementLocator: string, request: object, options?: any): AxiosPromise<ReinstatementAmountDueResponse> {
            return localVarFp.getReinstatementAmountDueUsingPOST(reinstatementLocator, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getReinstatementByLocatorUsingGET
         * @param {string} reinstatementLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReinstatementByLocatorUsingGET(reinstatementLocator: string, options?: any): AxiosPromise<LapseReinstatementResponse> {
            return localVarFp.getReinstatementByLocatorUsingGET(reinstatementLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary invoiceReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoiceReinstatementUsingPOST(reinstatementLocator: string, request: object, options?: any): AxiosPromise<LapseReinstatementResponse> {
            return localVarFp.invoiceReinstatementUsingPOST(reinstatementLocator, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary removeDocumentFromReinstatementUsingPOST
         * @param {string} reinstatementLocator 
         * @param {ReinstatementDocumentRemoveRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDocumentFromReinstatementUsingPOST(reinstatementLocator: string, request: ReinstatementDocumentRemoveRequest, options?: any): AxiosPromise<LapseReinstatementResponse> {
            return localVarFp.removeDocumentFromReinstatementUsingPOST(reinstatementLocator, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReinstatementApi - object-oriented interface
 * @export
 * @class ReinstatementApi
 * @extends {BaseAPI}
 */
export class ReinstatementApi extends BaseAPI {
    /**
     * 
     * @summary addDocumentToReinstatementUsingPOST
     * @param {string} displayName 
     * @param {string} documentType 
     * @param {string} reinstatementLocator 
     * @param {any} document 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementApi
     */
    public addDocumentToReinstatementUsingPOST(displayName: string, documentType: string, reinstatementLocator: string, document: any, options?: any) {
        return ReinstatementApiFp(this.configuration).addDocumentToReinstatementUsingPOST(displayName, documentType, reinstatementLocator, document, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary closeReinstatementUsingPOST
     * @param {string} reinstatementLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementApi
     */
    public closeReinstatementUsingPOST(reinstatementLocator: string, options?: any) {
        return ReinstatementApiFp(this.configuration).closeReinstatementUsingPOST(reinstatementLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getReinstatementAmountDueUsingPOST
     * @param {string} reinstatementLocator 
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementApi
     */
    public getReinstatementAmountDueUsingPOST(reinstatementLocator: string, request: object, options?: any) {
        return ReinstatementApiFp(this.configuration).getReinstatementAmountDueUsingPOST(reinstatementLocator, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getReinstatementByLocatorUsingGET
     * @param {string} reinstatementLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementApi
     */
    public getReinstatementByLocatorUsingGET(reinstatementLocator: string, options?: any) {
        return ReinstatementApiFp(this.configuration).getReinstatementByLocatorUsingGET(reinstatementLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary invoiceReinstatementUsingPOST
     * @param {string} reinstatementLocator 
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementApi
     */
    public invoiceReinstatementUsingPOST(reinstatementLocator: string, request: object, options?: any) {
        return ReinstatementApiFp(this.configuration).invoiceReinstatementUsingPOST(reinstatementLocator, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary removeDocumentFromReinstatementUsingPOST
     * @param {string} reinstatementLocator 
     * @param {ReinstatementDocumentRemoveRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReinstatementApi
     */
    public removeDocumentFromReinstatementUsingPOST(reinstatementLocator: string, request: ReinstatementDocumentRemoveRequest, options?: any) {
        return ReinstatementApiFp(this.configuration).removeDocumentFromReinstatementUsingPOST(reinstatementLocator, request, options).then((request) => request(this.axios, this.basePath));
    }
}
