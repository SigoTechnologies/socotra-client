/* tslint:disable */
/* eslint-disable */
/**
 * Socotra API Reference
 * Socotra REST API Description
 *
 * The version of the OpenAPI document: 1.3.191
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PolicyReportRequest } from '../model';
// @ts-ignore
import { ReportPreviewResponse } from '../model';
// @ts-ignore
import { ReportResponse } from '../model';
// @ts-ignore
import { ReportStatusResponse } from '../model';
// @ts-ignore
import { RunReportResponse } from '../model';
/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getReportStatusUsingGET
         * @param {string} reportLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportStatusUsingGET: async (reportLocator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportLocator' is not null or undefined
            assertParamExists('getReportStatusUsingGET', 'reportLocator', reportLocator)
            const localVarPath = `/report/{reportLocator}/status`
                .replace(`{${"reportLocator"}}`, encodeURIComponent(String(reportLocator)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runAllPolciesReportPreviewUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runAllPolciesReportPreviewUsingPOST: async (request: PolicyReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runAllPolciesReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/allPoliciesPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runAllPoliciesReportAsyncUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runAllPoliciesReportAsyncUsingPOST: async (request: PolicyReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runAllPoliciesReportAsyncUsingPOST', 'request', request)
            const localVarPath = `/report/allPolicies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runAllPoliciesReportUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runAllPoliciesReportUsingPOST: async (request: PolicyReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runAllPoliciesReportUsingPOST', 'request', request)
            const localVarPath = `/report/allPoliciesSynchronous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runClaimsPayablesReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runClaimsPayablesReportPreviewUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runClaimsPayablesReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/claim/payables/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runClaimsPayablesReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runClaimsPayablesReportUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runClaimsPayablesReportUsingPOST', 'request', request)
            const localVarPath = `/report/claim/payables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runClaimsReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runClaimsReportPreviewUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runClaimsReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/claim/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runClaimsReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runClaimsReportUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runClaimsReportUsingPOST', 'request', request)
            const localVarPath = `/report/claim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runFinancialTransactionReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runFinancialTransactionReportPreviewUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runFinancialTransactionReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/financialTransactionPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runFinancialTransactionReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runFinancialTransactionReportUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runFinancialTransactionReportUsingPOST', 'request', request)
            const localVarPath = `/report/financialTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runOnRiskReportAsyncUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runOnRiskReportAsyncUsingPOST: async (request: PolicyReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runOnRiskReportAsyncUsingPOST', 'request', request)
            const localVarPath = `/report/onRisk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runOnRiskReportPreviewUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runOnRiskReportPreviewUsingPOST: async (request: PolicyReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runOnRiskReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/onRiskPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runOnRiskReportUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runOnRiskReportUsingPOST: async (request: PolicyReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runOnRiskReportUsingPOST', 'request', request)
            const localVarPath = `/report/onRiskSynchronous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runPaidFinancialTransactionReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPaidFinancialTransactionReportPreviewUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runPaidFinancialTransactionReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/paidFinancialTransactionPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runPaidFinancialTransactionReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPaidFinancialTransactionReportUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runPaidFinancialTransactionReportUsingPOST', 'request', request)
            const localVarPath = `/report/paidFinancialTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runPayableCommissionsReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPayableCommissionsReportPreviewUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runPayableCommissionsReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/payableCommissions/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runPayableCommissionsReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPayableCommissionsReportUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runPayableCommissionsReportUsingPOST', 'request', request)
            const localVarPath = `/report/payableCommissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runReservesReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runReservesReportPreviewUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runReservesReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/claim/reserves/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runReservesReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runReservesReportUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runReservesReportUsingPOST', 'request', request)
            const localVarPath = `/report/claim/reserves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST', 'request', request)
            const localVarPath = `/report/unearnedPremium/accountsReceivable/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary runUnearnedPremiumAccountsReceivableReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runUnearnedPremiumAccountsReceivableReportUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('runUnearnedPremiumAccountsReceivableReportUsingPOST', 'request', request)
            const localVarPath = `/report/unearnedPremium/accountsReceivable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getReportStatusUsingGET
         * @param {string} reportLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportStatusUsingGET(reportLocator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportStatusUsingGET(reportLocator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runAllPolciesReportPreviewUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runAllPolciesReportPreviewUsingPOST(request: PolicyReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runAllPolciesReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runAllPoliciesReportAsyncUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runAllPoliciesReportAsyncUsingPOST(request: PolicyReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runAllPoliciesReportAsyncUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runAllPoliciesReportUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runAllPoliciesReportUsingPOST(request: PolicyReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runAllPoliciesReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runClaimsPayablesReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runClaimsPayablesReportPreviewUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runClaimsPayablesReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runClaimsPayablesReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runClaimsPayablesReportUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runClaimsPayablesReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runClaimsReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runClaimsReportPreviewUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runClaimsReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runClaimsReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runClaimsReportUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runClaimsReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runFinancialTransactionReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runFinancialTransactionReportPreviewUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runFinancialTransactionReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runFinancialTransactionReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runFinancialTransactionReportUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runFinancialTransactionReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runOnRiskReportAsyncUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runOnRiskReportAsyncUsingPOST(request: PolicyReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runOnRiskReportAsyncUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runOnRiskReportPreviewUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runOnRiskReportPreviewUsingPOST(request: PolicyReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runOnRiskReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runOnRiskReportUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runOnRiskReportUsingPOST(request: PolicyReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runOnRiskReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runPaidFinancialTransactionReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runPaidFinancialTransactionReportPreviewUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runPaidFinancialTransactionReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runPaidFinancialTransactionReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runPaidFinancialTransactionReportUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runPaidFinancialTransactionReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runPayableCommissionsReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runPayableCommissionsReportPreviewUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runPayableCommissionsReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runPayableCommissionsReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runPayableCommissionsReportUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runPayableCommissionsReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runReservesReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runReservesReportPreviewUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runReservesReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runReservesReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runReservesReportUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runReservesReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary runUnearnedPremiumAccountsReceivableReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runUnearnedPremiumAccountsReceivableReportUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runUnearnedPremiumAccountsReceivableReportUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * 
         * @summary getReportStatusUsingGET
         * @param {string} reportLocator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportStatusUsingGET(reportLocator: string, options?: any): AxiosPromise<ReportStatusResponse> {
            return localVarFp.getReportStatusUsingGET(reportLocator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runAllPolciesReportPreviewUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runAllPolciesReportPreviewUsingPOST(request: PolicyReportRequest, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runAllPolciesReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runAllPoliciesReportAsyncUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runAllPoliciesReportAsyncUsingPOST(request: PolicyReportRequest, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runAllPoliciesReportAsyncUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runAllPoliciesReportUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runAllPoliciesReportUsingPOST(request: PolicyReportRequest, options?: any): AxiosPromise<ReportResponse> {
            return localVarFp.runAllPoliciesReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runClaimsPayablesReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runClaimsPayablesReportPreviewUsingPOST(request: object, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runClaimsPayablesReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runClaimsPayablesReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runClaimsPayablesReportUsingPOST(request: object, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runClaimsPayablesReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runClaimsReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runClaimsReportPreviewUsingPOST(request: object, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runClaimsReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runClaimsReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runClaimsReportUsingPOST(request: object, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runClaimsReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runFinancialTransactionReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runFinancialTransactionReportPreviewUsingPOST(request: object, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runFinancialTransactionReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runFinancialTransactionReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runFinancialTransactionReportUsingPOST(request: object, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runFinancialTransactionReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runOnRiskReportAsyncUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runOnRiskReportAsyncUsingPOST(request: PolicyReportRequest, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runOnRiskReportAsyncUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runOnRiskReportPreviewUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runOnRiskReportPreviewUsingPOST(request: PolicyReportRequest, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runOnRiskReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runOnRiskReportUsingPOST
         * @param {PolicyReportRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runOnRiskReportUsingPOST(request: PolicyReportRequest, options?: any): AxiosPromise<ReportResponse> {
            return localVarFp.runOnRiskReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runPaidFinancialTransactionReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPaidFinancialTransactionReportPreviewUsingPOST(request: object, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runPaidFinancialTransactionReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runPaidFinancialTransactionReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPaidFinancialTransactionReportUsingPOST(request: object, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runPaidFinancialTransactionReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runPayableCommissionsReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPayableCommissionsReportPreviewUsingPOST(request: object, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runPayableCommissionsReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runPayableCommissionsReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPayableCommissionsReportUsingPOST(request: object, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runPayableCommissionsReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runReservesReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runReservesReportPreviewUsingPOST(request: object, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runReservesReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runReservesReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runReservesReportUsingPOST(request: object, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runReservesReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST(request: object, options?: any): AxiosPromise<ReportPreviewResponse> {
            return localVarFp.runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary runUnearnedPremiumAccountsReceivableReportUsingPOST
         * @param {object} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runUnearnedPremiumAccountsReceivableReportUsingPOST(request: object, options?: any): AxiosPromise<RunReportResponse> {
            return localVarFp.runUnearnedPremiumAccountsReceivableReportUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * 
     * @summary getReportStatusUsingGET
     * @param {string} reportLocator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public getReportStatusUsingGET(reportLocator: string, options?: any) {
        return ReportApiFp(this.configuration).getReportStatusUsingGET(reportLocator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runAllPolciesReportPreviewUsingPOST
     * @param {PolicyReportRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runAllPolciesReportPreviewUsingPOST(request: PolicyReportRequest, options?: any) {
        return ReportApiFp(this.configuration).runAllPolciesReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runAllPoliciesReportAsyncUsingPOST
     * @param {PolicyReportRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runAllPoliciesReportAsyncUsingPOST(request: PolicyReportRequest, options?: any) {
        return ReportApiFp(this.configuration).runAllPoliciesReportAsyncUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runAllPoliciesReportUsingPOST
     * @param {PolicyReportRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runAllPoliciesReportUsingPOST(request: PolicyReportRequest, options?: any) {
        return ReportApiFp(this.configuration).runAllPoliciesReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runClaimsPayablesReportPreviewUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runClaimsPayablesReportPreviewUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runClaimsPayablesReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runClaimsPayablesReportUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runClaimsPayablesReportUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runClaimsPayablesReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runClaimsReportPreviewUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runClaimsReportPreviewUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runClaimsReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runClaimsReportUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runClaimsReportUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runClaimsReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runFinancialTransactionReportPreviewUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runFinancialTransactionReportPreviewUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runFinancialTransactionReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runFinancialTransactionReportUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runFinancialTransactionReportUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runFinancialTransactionReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runOnRiskReportAsyncUsingPOST
     * @param {PolicyReportRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runOnRiskReportAsyncUsingPOST(request: PolicyReportRequest, options?: any) {
        return ReportApiFp(this.configuration).runOnRiskReportAsyncUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runOnRiskReportPreviewUsingPOST
     * @param {PolicyReportRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runOnRiskReportPreviewUsingPOST(request: PolicyReportRequest, options?: any) {
        return ReportApiFp(this.configuration).runOnRiskReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runOnRiskReportUsingPOST
     * @param {PolicyReportRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runOnRiskReportUsingPOST(request: PolicyReportRequest, options?: any) {
        return ReportApiFp(this.configuration).runOnRiskReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runPaidFinancialTransactionReportPreviewUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runPaidFinancialTransactionReportPreviewUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runPaidFinancialTransactionReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runPaidFinancialTransactionReportUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runPaidFinancialTransactionReportUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runPaidFinancialTransactionReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runPayableCommissionsReportPreviewUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runPayableCommissionsReportPreviewUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runPayableCommissionsReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runPayableCommissionsReportUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runPayableCommissionsReportUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runPayableCommissionsReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runReservesReportPreviewUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runReservesReportPreviewUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runReservesReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runReservesReportUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runReservesReportUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runReservesReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runUnearnedPremiumAccountsReceivableReportPreviewUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary runUnearnedPremiumAccountsReceivableReportUsingPOST
     * @param {object} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public runUnearnedPremiumAccountsReceivableReportUsingPOST(request: object, options?: any) {
        return ReportApiFp(this.configuration).runUnearnedPremiumAccountsReceivableReportUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }
}
